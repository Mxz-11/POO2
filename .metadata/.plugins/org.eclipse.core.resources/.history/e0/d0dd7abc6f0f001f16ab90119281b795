package Imagen;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;

import org.apache.commons.imaging.Imaging;
import org.apache.commons.imaging.ImagingException;
import org.apache.commons.imaging.common.ImageMetadata;
import org.apache.commons.imaging.common.RationalNumber;
import org.apache.commons.imaging.formats.jpeg.JpegImageMetadata;
import org.apache.commons.imaging.formats.jpeg.exif.ExifRewriter;
import org.apache.commons.imaging.formats.tiff.TiffField;
import org.apache.commons.imaging.formats.tiff.TiffImageMetadata;
import org.apache.commons.imaging.formats.tiff.constants.ExifTagConstants;
import org.apache.commons.imaging.formats.tiff.write.TiffOutputDirectory;
import org.apache.commons.imaging.formats.tiff.write.TiffOutputSet;

public class metadata {	
	private static String make;	
	private static String model;	
	private static String iso;		
	private static String creador; 
	private static int alto;	
	private static int ancho;	
	private static String fecha; //"AÃ±o:mes:dia hora(2 digitos):min:seg" PE: 2022:01:02 00:00:00
	private String ruta;
	
	
	public metadata(String make, String model, String iso, String creador, String fecha, String ruta, int alto, int ancho) {
		super();
		this.make = make;
		this.model = model;
		this.iso = iso;
		this.creador = creador;
		this.fecha = fecha;
		this.ruta = ruta;
		this.alto = alto;
		this.ancho = ancho;
	}


	public void getMet(String ruta) throws ImagingException, IOException {
		File imagen = new File(ruta);
		if (ruta.endsWith(".jpg") || ruta.endsWith(".jpeg")) {
			JpegImageMetadata m = (JpegImageMetadata) Imaging.getMetadata(imagen);

			if(m.getExif() != null) {
				TiffImageMetadata t = m.getExif();
				TiffField a = null;
				
				if (t.findField(ExifTagConstants.EXIF_TAG_MAKER_NOTE) != null){
					a = t.findField(ExifTagConstants.EXIF_TAG_MAKER_NOTE);
					make = a.getValueDescription();
				}
				if (t.findField(ExifTagConstants.EXIF_TAG_ISO) != null) {
					a = t.findField(ExifTagConstants.EXIF_TAG_ISO);
					iso = a.getValueDescription();
				}
				if(t.findField(ExifTagConstants.EXIF_TAG_MODEL_2) != null) {
					a = t.findField(ExifTagConstants.EXIF_TAG_MODEL_2);
					model = a.getValueDescription();
				}
				if(t.findField(ExifTagConstants.EXIF_TAG_CAMERA_OWNER_NAME) != null) {
					a = t.findField(ExifTagConstants.EXIF_TAG_CAMERA_OWNER_NAME);
					creador = a.getValueDescription();
				}
				if(t.findField(ExifTagConstants.EXIF_TAG_DATE_TIME_ORIGINAL) != null) {
					a = t.findField(ExifTagConstants.EXIF_TAG_DATE_TIME_ORIGINAL);
					fecha = a.getValueDescription();
				}
			}
			
		}
	}
	
	public static void setMetadata(final File jpegImageFile, final File dst) //metere los datos que introducir
            throws IOException, ImagingException, ImagingException {
        try (FileOutputStream fos = new FileOutputStream(dst); OutputStream os = new BufferedOutputStream(fos)) {

            TiffOutputSet outputSet = null;
            final ImageMetadata metadata = Imaging.getMetadata(jpegImageFile);
            final JpegImageMetadata jpegMetadata = (JpegImageMetadata) metadata;
            if (null != jpegMetadata) {
                final TiffImageMetadata exif = jpegMetadata.getExif();
                if (null != exif) {
                    outputSet = exif.getOutputSet();
                }
            }

            if (null == outputSet) {
                outputSet = new TiffOutputSet();
            }

            {
                final TiffOutputDirectory exifDirectory = outputSet.getOrCreateExifDirectory();
                exifDirectory.removeField(ExifTagConstants.EXIF_TAG_APERTURE_VALUE);
                exifDirectory.add(ExifTagConstants.EXIF_TAG_APERTURE_VALUE, new RationalNumber(3, 10));
                exifDirectory.removeField(ExifTagConstants.EXIF_TAG_DATE_TIME_ORIGINAL);
                
				exifDirectory.add(ExifTagConstants.EXIF_TAG_DATE_TIME_ORIGINAL, fecha);	
                exifDirectory.add(ExifTagConstants.EXIF_TAG_CAMERA_OWNER_NAME, creador);
                exifDirectory.add(ExifTagConstants.EXIF_TAG_ISO, Short.parseShort(iso));
                exifDirectory.add(ExifTagConstants.EXIF_TAG_MODEL_2, model.getBytes());
                exifDirectory.add(ExifTagConstants.EXIF_TAG_MAKER_NOTE, make.getBytes());
                     
            }
            new ExifRewriter().updateExifMetadataLossless(jpegImageFile, os, outputSet);
        }
    }

	public String getMake() {
		return make;
	}

	public String getModel() {
		return model;
	}
	
	public String getIso() {
		return iso;
	}

	public String getCreador() {
		return creador;
	}

	public int getAlto() {
		return alto;
	}

	public int getAncho() {
		return ancho;
	}

	public String getFecha() {
		return fecha;
	}
	
	public String getRuta() {
		return ruta;
	}

}
